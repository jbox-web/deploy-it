#!/usr/bin/env ruby

STDOUT.sync = true
STDERR.sync = true

## Include Libs
RAILS_ENV = ENV['RAILS_ENV'] ||= 'production'
require_relative '../config/environment'

#########
## MAIN #
#########

## This is the second entry point called from ~/repositories/<my_repo>/hooks/pre-receive
## It passes 1 arg :
## @argv[0] = repository

## Find user
user = User.find_by_id(ENV['USER_ID'])

## SSH_ORIGINAL_COMMAND is available as environment variable
repo_name   = DeployIt::Utils::Git.parse_repository_from_ssh_command
application = Application.find_by_repo_url(repo_name)
repository  = application.distant_repo

## Validate pushed data
valid, build_refs = DeployIt::Utils::Git.ref_is_valid?(repository.local_branch)

if valid
  # First create push
  push = application.pushes.create(build_refs.merge(author: user))

  # Then build application
  DCI::Roles::ApplicationManager.new(DCI::Contexts::Console).build_application(application, user, push, async: false, logger: 'console') do |task|
    if !task.success?
      DCI::Contexts::Console.render_failed(message: task.errors)
      exit 1
    else
      exit 0
    end
  end
else
  DCI::Contexts::Console.render_failed(message: "Deploy did not complete, you must push to '#{repository.local_branch}' branch !")
  exit 1
end
